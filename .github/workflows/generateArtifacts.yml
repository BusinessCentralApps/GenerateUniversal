name: Generate Business Central Artifacts

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      feedUrl:
        description: Universal package feed url
        required: true
        default: ''
      feedToken:
        description: Universal package feed token
        required: true
        default: ''
      storageAccount:
        description: StorageAccount for the artifacts
        required: true
        default: ''
      artifactType:
        description: Type of Business Central artifacts to use
        required: true
        default: ''
      artifactVersion:
        description: Business Central Version to generate packages for
        required: true
        default: ''
      country:
        description: Localization of Business Central (or * for all)
        required: false
        default: '*'
      run-name:
        description: Name of the run (leave empty to use the default name)
        required: false
        default: ''

run-name: ${{ github.event.inputs.run-name != '' && github.event.inputs.run-name || github.workflow }}

concurrency:
  group: ${{ github.event.inputs.run-name != '' && github.event.inputs.run-name || github.workflow }}
  cancel-in-progress: false

env:
  artifactVersion: ${{ github.event.inputs.artifactVersion }}
  artifactType: ${{ github.event.inputs.artifactType }}
  storageAccount: ${{ github.event.inputs.storageAccount }}

jobs:
  CalculatePackages:
    name: Calculate Packages
    runs-on: [ ubuntu-latest ]
    outputs:
      packages: ${{ steps.CalculatePackages.outputs.Packages }}
      packagesCount: ${{ steps.CalculatePackages.outputs.PackagesCount }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Mask input
        shell: pwsh
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "MaskInput.ps1")

      - name: CalculatePackages
        id: CalculatePackages
        shell: pwsh
        env:
          country: ${{ github.event.inputs.country }}
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "CalculatePackages.ps1")

  GenerateUniversalPackages:
    needs: [ CalculatePackages ]
    if: needs.CalculatePackages.outputs.packagesCount > 0
    runs-on: [ ubuntu-latest ]
    strategy:
      matrix:
        include: ${{ fromJson(needs.CalculatePackages.outputs.packages) }}
      fail-fast: false
    name: ${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Mask input
        shell: pwsh
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "MaskInput.ps1")

      - name: Generate Universal Package
        id: firstAttempt
        shell: pwsh
        timeout-minutes: 15
        continue-on-error: true
        env:
          AZURE_DEVOPS_EXT_PAT: ${{ github.event.inputs.feedToken }}
          feedUrl: ${{ github.event.inputs.feedUrl }}
          package: ${{ matrix.package }}
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "GenerateUniversalPackage.ps1")

      - name: Generate Universal Package (retry)
        if: steps.firstAttempt.outcome == 'Failure'
        shell: pwsh
        timeout-minutes: 60
        env:
          AZURE_DEVOPS_EXT_PAT: ${{ github.event.inputs.feedToken }}
          feedUrl: ${{ github.event.inputs.feedUrl }}
          package: ${{ matrix.package }}
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "GenerateUniversalPackage.ps1")
